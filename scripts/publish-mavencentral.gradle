apply plugin: 'maven-publish'
apply plugin: 'signing'

// README
// 1. Build .aar with `./gradlew colorpicker:bundleReleaseAar`
// 2. Upload .aar to stage mavencentral with `colorpicker:colorpicker [publish]`
// 3. Create stage version at https://s01.oss.sonatype.org/#stagingRepositories
// 4. Test stage version:
//     - add repo: maven { url "https://s01.oss.sonatype.org/content/repositories/staging/" }
//     - add new dependency to demo app
//     - run demo app
// 5. Release stage version at https://s01.oss.sonatype.org/#stagingRepositories

tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
File secretPropsFile = project.rootProject.file('secret.properties')
Properties p = new Properties()
new FileInputStream(secretPropsFile).withCloseable { is ->
    p.load(is)
}
p.each { name, value ->
    ext[name] = value
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                if (project.plugins.findPlugin("com.android.library")) {
                    artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                } else {
                    artifact("$buildDir/libs/${project.getName()}-${version}.jar")
                }
                artifact androidSourcesJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Beautiful color picker for Android'
                    url = 'https://vadiole.github.io/colorpicker'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'vadiole'
                            name = 'Dmitriy'
                            email = 'xdmiree@gmail.com'
                        }

                    }
                    // Version control info - if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git:github.com/vadiole/colorpicker.git'
                        developerConnection = 'scm:git:ssh://github.com/vadiole/colorpicker.git'
                        url = 'https://github.com/vadiole/colorpicker/tree/master'
                    }
                    // A slightly hacky fix so that your POM will include any transitive dependencies
                    // that your library builds upon
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "sonatype"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}
signing {
    sign publishing.publications
}
